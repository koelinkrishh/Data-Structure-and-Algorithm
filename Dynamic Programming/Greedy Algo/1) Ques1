import math
import string
from typing import List
from functools import reduce

''' Q.1) N meeting in a room:
Given the time at which N meeting will start at and end at in integer arrays.
You have songle meeting room in which one meeting at undergo at a time. 
Find the maximum number of meeting which can take place.
'''
cmp = lambda p: [p[1],p[0]]
def meeting(start:list,end:list,n:int)->int:
   v=[]
   for i in range(n):
      v.append([start[i],end[i]])

   v = sorted(v,key = cmp)
   
   count=1
   endprev = v[0][1]
   
   for ind in range(1,n):
      if v[i][0] > endprev:
         count+=1
         endprev = v[i][1]
   
   return count


''' Q.2) Shop in Candy store:
In a candy store, there are N different types of candies and prices are given
in an interger array. You are given an offer: you can buy single candy from store
and get at most K other candies for free.

Find the minimum amount of money you have to spend to buy all different N candies
and maximum amount of moeny you have to spend to buy all the different N candies.
'''
def Amount(prices:list,k) -> tuple:
   prices.sort()
   n = len(prices)
   Min,Max = prices[0],prices[n-1]
   
   # Pointer
   st,end = 0,n-1
   st2,end2 = 0,n-1
   
   while(st<end):
      end -= k
      st += 1
      Min += prices[st]
   while(st2<end2):
      end2 -= 1
      st2 += k
      Max += prices[end2]
   
   return (Min,Max)


''' Q.3) If you get one candy free for buying one as long as the cost of the chosen
candy is less than or equal to the minimum cost of the two candies bought. '''
def minimumCost(self, cost: List[int]) -> int:
   cost.sort()
   end = len(cost)-1
   
   mincost=0
   if end==0:
      return cost[end]
   
   while(end>=0):
      mincost += cost[end]
      if end-1>=0:
         mincost += cost[end-1]
      end -=3
   
   return mincost
# OR Optimal:
def MinCost(cost: List[int]) -> int:
   cost.sort(reverse=True)
   res,i,N = 0,0,len(cost)
   
   while i<N:
      # add first two, skip third
      res += sum(cost[i:i+2]) 
      i += 3
   return res

''' Q.4) {HARD} N children are standing in a line. Each child is assigned a rating
value given in the integer array ratings. You are giving candies to these children
subjected to the following requirements:

-> Each child must have at least one candy.
-> Children with a higher rating get more candies than their neighbors.

Return the minimum number of candies you need to have to distribute the candies to children. 
'''
def Candy(rating:List[int])->int:
   N = len(rating)
   
   if(N<2): return N
   
   candies = [1]*N
   
   for i in range(1,N):
      if rating[i]>rating[i-1]:
         rating[i] = rating[i-1] + 1
   
   for i in range(N-2,-1,-1):
      if rating[i]>rating[i+1]:
         rating[i] = max(rating[i],rating[i+1] + 1)
   
   return sum(candies)

""" Q.5) Check if it is mpossible to survive on Island: 
Ishika got stuck on an island.There is one shop which is open on all days except sunday.
-> N - Maximum unit of food you can buy
-> S - Number of days you have to survive
-> M - Unit of food consumed each day

Currently its monday and she needs to survive for the next S day. 
Find the minimum number of days on which you need to by food so she can survive the 
next 5 days, or determin that it isn't possible to survive
"""
def Survival(N:int,S:int,M:int)->int:
   # To survive: we need to have enough food to survive sunday without buy
   if (N*6 < M*7 and S>6) or M>N:
   # if we wont have enough leftover to survive sunday or if consumption is more than buy in
      return -1
   
   #Logic: [(Total consumption)/buy] upper bound on each day will give you no of buys need
   return math.ceil(S*M/N)

""" Q.6) Reverse sentence but not words in sentence ,i.e., order of words """
def reverseSentence(S:str)->str:
   ans = ""
   temp = ""
   
   for i in range(len(S)-1,-1,-1):
      if S[i] == ' ':
         # temp = "".join(reversed(temp))  # OR
         temp = reduce(lambda x,y:y+x,temp)
         ans = ans + temp + ' '
         temp = ""
      else:
         temp += S[i]
      
   # Need to add first word
   temp = "".join(reversed(temp))
   ans += temp
   
   return ans
# OR Stack
def ReverseSent(S:str)->str:
   stack = []
   ans = ""
   temp = ""
   
   for char in S:
      if char == ' ':
         stack.append(temp)
         temp = ""
      else:
         temp += char
   stack.append(temp)
   
   # Need to add first word
   while stack:
      ans = ans + stack.pop() + " "
   
   return ans
# OR Optimal
def RevSentence(S:str)->str:
   temp = S.split(' ')
   temp.reverse()
   ans = ""
   for word in temp:
      ans = ans + word + " "
   
   return ans


if __name__ == "__main__":
   start = [1,3,0,5,8,5]
   end = [2,4,6,7,9,9]
   n = len(start)
   
   Maxmeeting = meeting(start,end,n)
   print(Maxmeeting)
   
   prices = [3,2,1,4]
   print(Amount(prices,2))
   
   CandPric1 = [1,3,4,5,2]
   CandPric2 = [1,2,87,87,87,2,1]
   
   print(Candy(CandPric1))
   print(Candy(CandPric2))
   
   S = 10;N=28;M=20
   print(f"Survival for {S} days with {N} food consumed at a rate of {M} unit per day.")
   ans = Survival(N,S,M)
   if ans==-1:
      print("Survival not possible")
   else:
      print("Requires us to buy food {} times".format(ans))
   
   sentence = 'The quick brown fox jumps over the lazy dog'
   res = reverseSentence(sentence)
   res2 = RevSentence(sentence)
   res3 = ReverseSent(sentence)
   print("Original sentence: ",sentence)
   print("Reverse of sentence: ",res3)
   

