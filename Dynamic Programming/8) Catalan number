import math
from rich import print


"""   In combinatorial mathematics, the Catalan numbers are a sequence of natural numbers that
occur in various counting problems, often involving recursively defined objects. 

Application:  
1) Number of possible Binary Search Trees with n keys.
2) Number of expressions containing n pairs of parentheses which are correctly matched.
   ex:- for n = 3, possible expressions are ((())), ()(()), ()()(), (())(), (()()).

3) Number of ways a convex polygon of n+2 sides can split into triangles by connecting vertices.
4) Number of full binary trees (A rooted binary tree is full if every vertex has either two children or no children) with n+1 leaves.

5) The number of paths with 2n steps on a rectangular grid from bottom left, i.e., (n-1, 0) to top right (0, n-1) that do not cross above the main diagonal.
6) number of ways to travel from (0,0) to (0,2n) diagonally such that its always above x axis.
   OR
   Number of ways to form a “mountain ranges” with n upstrokes and n down-strokes that all stay above the original line.
   The mountain range interpretation is that the mountains will never go below the horizon.

7) Number of Dyck words of length 2n. A Dyck word is a string consisting of n X’s and n Y’s such that no initial segment of the string has more Y’s than X’s.
   ex: Dyck words of length 6 -> XXXYYY   XYXXYY   XYXYXY   XXYYXY   XXYXYY.

General Formula: Cn = 1/(n+1) *COMB(2n,n) = COMB(2n,n)-COMB(2n,n+1) = (2n)!/(n+1)!n! = PROD [k=2,n] {n+k/k} = SUM [k=2,n] {PROD [l=0,k-1] { C(l)*C(k-l-1) } }

Recursion: C0 = 1, C{n} = 2(2n-1)/(n+1) C{n-1}

First few terms: C0=1, C1=1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, ...  
"""
Cat = lambda n: int(math.comb(2*n,n)/(n+1))

CatalanNumber = lambda n: int(math.comb(2*n,n) - math.comb(2*n,n+1))

def Catalan(n:int) ->int:
   return int(math.factorial(2*n)/(math.factorial(n)*math.factorial(n+1)))

def Catalannth(n:int) -> int:
   if n<=1:
      return 1
   
   prod=1
   for k in range(2,n+1):
      prod = prod*((n+k)/k)
   
   return int(prod)

def Catalannumber(n:int) -> int:
   if n<=1: return 1
   return 2*(2*n-1)*Catalannumber(n-1)//(n+1)

def CountValidParenthesis(n:int) -> int:
   dp = [0]*(n+1)
   dp[0],dp[1] = 1,1
   
   for i in range(2,n+1):
      for j in range(i):
         dp[i] += dp[j]*dp[i-j-1]
   
   return dp[n]


if __name__ == "__main__":
   print(Cat(5))
   print(Catalan(6))
   print(CatalanNumber(7))
   print(Catalannth(8))
   print(Catalannumber(9))
   print(CountValidParenthesis(10))
   
   
