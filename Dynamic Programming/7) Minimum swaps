import sys
import numpy as np

""" Given two integers array num1 & num2. You can swap num1[i] with num2[i].
Find the minimum number of swaps needed to convert them both into strictly increasing.
"""

# Brute force approach -> you may think but its incorrect because of the way greeedy lagorithm works
def BruteForce(num1,num2):
   minswap = 0
   
   for i in range(1,len(num1)):
      if num1[i-1] >= num1[i] or num2[i-1] >= num2[i]:
         num1[i],num2[i] = num2[i],num1[i]
         minswap += 1
      
   return minswap


# swapped is used to track whether to swap next variable
def solve(n1,n2,index,swapped,dp):
   if(index == len(n2)):
      return 0
   
   prev1 = n1[index-1]
   prev2 = n2[index-1]
   
   if dp[index][swapped] != -1:
      return dp[index][swapped]
   
   # Catch
   if swapped:
      prev1,prev2 = prev2,prev1
      
   ans = sys.maxsize # or use infinity
   
   # no need for Swapping
   if(n1[index] > prev1 and n2[index] > prev2):
      ans = solve(n1, n2, index+1, False, dp)
   
   # Swapping
   if(n1[index] > prev2 and n2[index] > prev1):
      ans = min(ans,1 + solve(n1, n2, index+1, True, dp))
   
   dp[index][swapped] = ans
   
   return ans
   
def minswap(nums1,nums2):
   nums1.insert(0,-1)
   nums2.insert(0,-1)
   n = len(nums1)
   
   dp = [[-1]*2 for _ in range(n+1)]
   
   return solve(nums1, nums2, 1, False, dp)
   

# Tabulation
def min_swap(nums1,nums2):
   N = len(nums1)
   dp = [[0]*2 for _ in range(N+1)]
   
   # initialize the base case
   # dp[N][0] = 0; dp[N][1] = 0;
   
   for index in range(N-1,-1,-1):
      for swapped in (1,0):
         ans = sys.maxsize # or use infinity
         prev1 = nums1[index-1] if index > 0 else -1
         prev2 = nums2[index-1] if index > 0 else -1
         
         if swapped:
            prev1,prev2 = prev2,prev1
         
         # no need for Swapping
         if(nums1[index] > prev1 and nums2[index] > prev2):
            ans = dp[index+1][0]
         # Swapping
         if(nums1[index] > prev2 and nums2[index] > prev1):
            ans = min(ans,1 + dp[index+1][1])
         
         dp[index][swapped] = ans
   
   return min(dp[0][1] , dp[0][0])

# Simpler code:
def Min_Swap(n1,n2):
   N = len(n1)
   keep = [np.inf]*N
   swap = [np.inf]*N
   
   keep[0] = 0
   swap[0] = 1
   
   for i in range(1,N):
      if num1[i] > num1[i-1] and num2[i] > num2[i-1]:
         keep[i] = keep[i-1]
         swap[i] = swap[i-1] + 1
      if num1[i] > num2[i-1] and num2[i] > num1[i-1]:
         keep[i] = min(keep[i], swap[i-1])
         swap[i] = min(swap[i], keep[i-1] + 1)
   
   return min(keep[-1],swap[-1])
   

# Optimization
def Minimum_swaps(num1,num2):
   N = len(n2)
   prev_swap, prev_noswap = 0,0
   
   for i in range(N-1,-1,-1):
      swap = noswap = sys.maxsize
      prev1 = num1[i-1] if i>0 else -1
      prev2 = num2[i-1] if i>0 else -1
      
      # no swapping
      if(num1[i] > prev1 and num2[i] > prev2):
         noswap = prev_noswap
         swap = prev_swap + 1
      # Swapping for optimum solution
      if(num1[i] > prev2 and num2[i] > prev1):
   # retains noswap if both cond work and change to prev_swap if only 2nd cond work
         noswap = min(noswap, prev_swap)
         swap = min(swap, prev_noswap + 1)
         
      prev_noswap = noswap
      prev_swap = swap
   
   return min(prev_noswap,prev_swap)
   

if __name__ == "__main__":
   num1 = [1,2,3,8,9]
   num2 = [5,6,7,4,7]
   
   # Use slicing to pass copies of num1 and num2 -> to not pass by reference
   print(minswap(num1[:],num2[:]))
   print(min_swap(num1[:],num2[:]))
   print(Min_Swap(num1[:],num2[:]))
   
